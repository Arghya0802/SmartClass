A --> Admin
T --> Teacher
S --> Student
D --> Department
L --> Subject

Admin will add Teacher & Student uniqueId along with their assigned Department from Backend
Student & Teacher then will register themselves using their registered uniqueId

Department:  Admin

Teacher and Student should have Department
(/api/v1/admin/add-department) 
(/api/v1/admin/add-subject)
(/api/v1/admin/add-teacher) --> Add Department
(/api/v1/admin/add-student) --> Add Department 
(/api/v1/teacher/add-resource)
(/api/v1/hod/teacher-subject)

Department:
uniqueId
Subjects: [ {uniqueId} ]
Teachers: [ {uniqueId} ]
HoD: 

Subject:
uniqueId,
Department: uniqueId
Teacher: uniqueId


Resource:
Department: uniqueId
Subject: uniqueId
Teacher: uniqueId
file: String

Assignment, Attendance

export const addSubjectToDepartment = asyncHandler(async (req, res, next) => {
  const { name, uniqueId, departmentId } = req.body;

  if (!uniqueId || !name || !departmentId)
    return next(
      new ApiError(
        400,
        "Please provide all the neccessary details before proceeding!!!"
      )
    );

  const existedSubject = await Subject.findOne({ uniqueId });
  const currentDepartment = await Department.findOne({
    uniqueId: departmentId,
  });

  if (existedSubject)
    return next(new ApiError(400, "Subject Unique-Id already exists!!!"));

  if (!currentDepartment)
    return next(
      new ApiError(
        404,
        "Sorry!!! No Department found with given Department Unique-Id!!!"
      )
    );

  for (const subjectId of currentDepartment.subjects) {
    const alreadyAddedSubject = await Subject.findOne({ uniqueId: subjectId });

    // console.log(alreadyAddedSubject.uniqueId);

    if (
      alreadyAddedSubject.name === name ||
      alreadyAddedSubject.uniqueId === uniqueId
    )
      return next(
        new ApiError(
          400,
          "Subject-Id or Subject-Name already exists in the given Department"
        )
      );
  }

  const newSubject = await Subject.create({
    name,
    uniqueId,
    department: departmentId,
  });

  if (!newSubject)
    return next(new ApiError(500, "Sorry!!! Internal Server Error!!!"));

  await Department.findByIdAndUpdate(currentDepartment._id, {
    $push: { subjects: uniqueId },
  });

  return res.status(201).json({
    newSubject,
    message: "Subject Created and added to given Department Successfully!!!",
    success: true,
  });
});